name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Release version"
        required: true
      next:
        description: "Next version"
        required: false

env:
  GRAAL_VERSION: '22.2.0'
  JAVA_VERSION: '11'
  JAVA_DISTRO: 'zulu'

jobs:
  precheck:
    runs-on: ubuntu-latest
    outputs:
      HEAD: ${{ steps.version.outputs.HEAD }}
      NEXT_VERSION: ${{ steps.version.outputs.NEXT_VERSION }}
    steps:
      - uses: actions/checkout@v2

      - name: 'Set up Java'
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: 'Cache Maven packages'
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: 'Set release version'
        id: version
        run: |
          RELEASE_VERSION=${{ github.event.inputs.version }}
          NEXT_VERSION=${{ github.event.inputs.next }}
          PLAIN_VERSION=`echo ${RELEASE_VERSION} | awk 'match($0, /^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)/) { print substr($0, RSTART, RLENGTH); }'`
          COMPUTED_NEXT_VERSION="${PLAIN_VERSION}-SNAPSHOT"
          if [ -z $NEXT_VERSION ]
          then
            NEXT_VERSION=$COMPUTED_NEXT_VERSION
          fi
          ./mvnw -B -ntp -ntp versions:set versions:commit -DnewVersion=$RELEASE_VERSION
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Action"
          git commit -a -m "üèÅ Releasing version $RELEASE_VERSION"
          git push origin HEAD:main
          HEAD=`git rev-parse HEAD`
          echo "::set-output name=NEXT_VERSION::$NEXT_VERSION"
          echo "::set-output name=HEAD::$HEAD"

  # Build native executable per runner
  build:
    needs: [ precheck ]
    name: 'Build with Graal on ${{ matrix.os }}'
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest, macOS-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.precheck.outputs.HEAD }}
    
      - name: 'Set up Graal'
        uses: graalvm/setup-graalvm@v1
        with:
          version: ${{ env.GRAAL_VERSION }}
          java-version: ${{ env.JAVA_VERSION }}
          components: 'native-image'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Cache Maven packages'
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: 'Build Native Image'
        run: ./mvnw -B -ntp --file pom.xml -Pnative package -DskipTests

      - name: 'Create distribution'
        run: ./mvnw -B -ntp --file pom.xml -Pdist package -DskipTests

      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v2
        with:
          name: artifacts
          path: |
            target/distributions/*.zip
            target/distributions/*.tar.gz

  # Collect all executables and release
  release:
    needs: [ precheck, build ]
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.precheck.outputs.HEAD }}
          fetch-depth: 0

      - name: 'Download all build artifacts'
        uses: actions/download-artifact@v2

      - name: 'Set up Java'
        uses: actions/setup-java@v2
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: 'Cache Maven packages'
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: 'Release with JReleaser'
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./mvnw -B -ntp --file pom.xml -Prelease -DartifactsDir=artifacts jreleaser:full-release
          
      - name: 'Set next version'
        run: |
          ./mvnw -B -ntp versions:set versions:commit -DnewVersion=${{ needs.precheck.outputs.NEXT_VERSION }}
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Action"
          git commit -a -m "‚¨ÜÔ∏è  Next version $NEXT_VERSION"
          git push origin HEAD:main